"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OBJECTTYPE = '[object Object]';
var ARRAYTYPE = '[object Array]';
function getUsing(data, paths) {
    if (!paths)
        return {};
    var obj = {};
    paths.forEach(function (path, index) {
        var isPath = typeof path === 'string';
        if (!isPath) {
            var key = Object.keys(path)[0];
            var value = path[key];
            if (typeof value !== 'string') {
                var tempPath = value[0];
                if (typeof tempPath === 'string') {
                    var tempVal = getTargetByPath(data, tempPath);
                    obj[key] = value[1] ? value[1](tempVal) : tempVal;
                }
                else {
                    var args_1 = [];
                    tempPath.forEach(function (path) {
                        args_1.push(getTargetByPath(data, path));
                    });
                    obj[key] = value[1].apply(null, args_1);
                }
            }
        }
    });
    return obj;
}
exports.getUsing = getUsing;
function getTargetByPath(origin, path) {
    var arr = path
        .replace(/]/g, '')
        .replace(/\[/g, '.')
        .split('.');
    var current = origin;
    for (var i = 0, len = arr.length; i < len; i++) {
        current = current[arr[i]];
    }
    return current;
}
exports.getTargetByPath = getTargetByPath;
function getPath(obj) {
    if (Object.prototype.toString.call(obj) === '[object Array]') {
        var result_1 = {};
        obj.forEach(function (item) {
            if (typeof item === 'string') {
                result_1[item] = true;
            }
            else {
                var tempPath = item[Object.keys(item)[0]];
                if (typeof tempPath === 'string') {
                    result_1[tempPath] = true;
                }
                else if (typeof tempPath[0] === 'string') {
                    result_1[tempPath[0]] = true;
                }
                else {
                    tempPath[0].forEach(function (path) { return (result_1[path] = true); });
                }
            }
        });
        return result_1;
    }
    return getUpdatePath(obj);
}
exports.getPath = getPath;
function getUpdatePath(data) {
    var result = {};
    dataToPath(data, result);
    return result;
}
exports.getUpdatePath = getUpdatePath;
function dataToPath(data, result) {
    Object.keys(data).forEach(function (key) {
        result[key] = true;
        var type = Object.prototype.toString.call(data[key]);
        if (type === OBJECTTYPE) {
            _objToPath(data[key], key, result);
        }
        else if (type === ARRAYTYPE) {
            _arrayToPath(data[key], key, result);
        }
    });
}
function _objToPath(data, path, result) {
    Object.keys(data).forEach(function (key) {
        result[path + '.' + key] = true;
        delete result[path];
        var type = Object.prototype.toString.call(data[key]);
        if (type === OBJECTTYPE) {
            _objToPath(data[key], path + '.' + key, result);
        }
        else if (type === ARRAYTYPE) {
            _arrayToPath(data[key], path + '.' + key, result);
        }
    });
}
function _arrayToPath(data, path, result) {
    data.forEach(function (item, index) {
        result[path + '[' + index + ']'] = true;
        delete result[path];
        var type = Object.prototype.toString.call(item);
        if (type === OBJECTTYPE) {
            _objToPath(item, path + '[' + index + ']', result);
        }
        else if (type === ARRAYTYPE) {
            _arrayToPath(item, path + '[' + index + ']', result);
        }
    });
}
function needUpdate(diffResult, updatePath) {
    for (var keyA in diffResult) {
        if (updatePath[keyA]) {
            return true;
        }
        for (var keyB in updatePath) {
            if (includePath(keyA, keyB)) {
                return true;
            }
        }
    }
    return false;
}
exports.needUpdate = needUpdate;
function includePath(pathA, pathB) {
    if (pathA.indexOf(pathB) === 0) {
        var next = pathA.substr(pathB.length, 1);
        if (next === '[' || next === '.') {
            return true;
        }
    }
    return false;
}
function fixPath(path) {
    var mpPath = '';
    var arr = path.replace('#-', '').split('-');
    arr.forEach(function (item, index) {
        if (index) {
            if (isNaN(Number(item))) {
                mpPath += '.' + item;
            }
            else {
                mpPath += '[' + item + ']';
            }
        }
        else {
            mpPath += item;
        }
    });
    return mpPath;
}
exports.fixPath = fixPath;
//# sourceMappingURL=data:application/json;base64,