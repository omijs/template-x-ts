"use strict";
/*!
 *  omix v2.3.1 by dntzhang
 *  Github: https://github.com/Tencent/omi
 *  MIT Licensed.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var obaa_1 = require("./obaa");
var path_1 = require("./path");
function create(store, option) {
    if (arguments.length === 2) {
        if (!store.instances) {
            store.instances = {};
        }
        if (!store.__changes_) {
            store.__changes_ = [];
        }
        var changes_1 = store.__changes_;
        if (!store.onChange) {
            store.onChange = function (fn) {
                changes_1.push(fn);
            };
        }
        if (!store.offChange) {
            store.offChange = function (fn) {
                for (var i = 0, len = changes_1.length; i < len; i++) {
                    if (changes_1[i] === fn) {
                        changes_1.splice(i, 1);
                        break;
                    }
                }
            };
        }
        var hasData_1 = typeof option.data !== 'undefined';
        if (option.data) {
            option.data.$ = store.data;
        }
        else {
            option.data = store.data;
        }
        observeStore(store);
        var onLoad_1 = option.onLoad;
        option.onLoad = function (e) {
            this.store = store;
            option.use && (this.__updatePath = path_1.getPath(option.use));
            this.__use = option.use;
            this.__hasData = hasData_1;
            store.instances[this.route] = [];
            store.instances[this.route].push(this);
            this.computed = option.computed;
            this.setData(option.data);
            var using = path_1.getUsing(store.data, option.use);
            option.computed && compute(option.computed, store, using, this);
            this.setData(using);
            onLoad_1 && onLoad_1.call(this, e);
        };
        Page(option);
    }
    else {
        var ready_1 = (store.lifetimes && store.lifetimes.ready) || store.ready;
        store.lifetimes = store.lifetimes || {};
        store.ready = store.lifetimes.ready = function () {
            var page = getCurrentPages()[getCurrentPages().length - 1];
            store.use && (this.__updatePath = path_1.getPath(store.use));
            this.store = page.store;
            this.__use = store.use;
            this.computed = store.computed;
            store.data = this.store.data;
            this.setData(store.data);
            var using = path_1.getUsing(this.store.data, store.use);
            store.computed && compute(store.computed, this.store, using, this);
            this.setData(using);
            this.store.instances[page.route].push(this);
            ready_1 && ready_1.call(this);
        };
        Component(store);
    }
}
function compute(computed, store, using, scope) {
    for (var key in computed) {
        using[key] = computed[key].call(store.data, scope);
    }
}
function observeStore(store) {
    var oba = obaa_1.default(store.data, function (prop, value, old, path) {
        var patch = {};
        if (prop.indexOf('Array-push') === 0) {
            var dl = value.length - old.length;
            for (var i = 0; i < dl; i++) {
                patch[path_1.fixPath(path + '-' + (old.length + i))] = value[(old.length + i)];
            }
        }
        else if (prop.indexOf('Array-') === 0) {
            patch[path_1.fixPath(path)] = value;
        }
        else {
            patch[path_1.fixPath(path + '-' + prop)] = value;
        }
        _update(patch, store);
    });
    if (!store.set) {
        store.set = function (obj, prop, val) {
            obaa_1.default.set(obj, prop, val, oba);
        };
    }
}
function _update(kv, store) {
    for (var key in store.instances) {
        store.instances[key].forEach(function (ins) {
            if (store.updateAll || ins.__updatePath && path_1.needUpdate(kv, ins.__updatePath)) {
                if (ins.__hasData) {
                    for (var pk in kv) {
                        kv['$.' + pk] = kv[pk];
                        delete kv[pk];
                    }
                    ins.setData.call(ins, kv);
                }
                else {
                    ins.setData.call(ins, kv);
                }
                var using = path_1.getUsing(store.data, ins.__use);
                compute(ins.computed, store, using, ins);
                ins.setData(using);
            }
        });
    }
    store.__changes_.forEach(function (change) {
        change(kv);
    });
    store.debug && storeChangeLogger(store, kv);
}
function storeChangeLogger(store, diffResult) {
    try {
        var preState = wx.getStorageSync("CurrentState") || {};
        var title = "Data Changed";
        console.groupCollapsed("%c  " + title + " %c " + Object.keys(diffResult), 'color:#e0c184; font-weight: bold', 'color:#f0a139; font-weight: bold');
        console.log("%c    Pre Data", 'color:#ff65af; font-weight: bold', preState);
        console.log("%c Change Data", 'color:#3d91cf; font-weight: bold', diffResult);
        console.log("%c   Next Data", 'color:#2c9f67; font-weight: bold', store.data);
        console.groupEnd();
        wx.setStorageSync("CurrentState", store.data);
    }
    catch (e) {
        console.log(e);
    }
}
create.obaa = obaa_1.default;
exports.default = create;
//# sourceMappingURL=data:application/json;base64,